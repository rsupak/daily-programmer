def clumsy(num)
  if num > 4
    num + 1 + final_sequence(num)
  elsif num < 4
    num + 1 - final_sequence(num)
  else
    num * (num - 1) / (num - 2) + num - 3 #=> 7
  end
end

def final_sequence(num)
  case num % 4
  when 0
    0
  when 1, 2
    1
  when 3
    -2
  end
end

arr = []
(1..25).each do |num|
  arr << clumsy(num)
end
p arr

# num
# acc = num + 1
# num -= 4 until num == 5

# 20 * 19 / 18 + 17 - 16 * 15 / 14 + 13 - 12 * 11 / 10 + 9 - 8 * 7 / 6 + 5 - 4 * 3 / 2 + 1
# 21 + 17 - 17 + 13 - 13 + 9 - 9 + 5 - 6 + 1
# 21 + 5 - 6 + 1
# 26 - 6 + 1
# 20 + 1
# 21

# 12 * 11 / 10 + 9 - 8 * 7 / 6 + 5 - 4 * 3 / 2 + 1
# 13 + 9 - 9 + 5 - 6 + 1
# n + 1 + 5 - 6 + 1
# n + 1

# 11 * 10 / 9 + 8 - 7 * 6 / 5 + 4 - 3 * 2 / 1
# 12 + 8 - 8 + 4 - 6
# n + 1 + 4 - 6
# n - 1

# 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
# 11 + 7 - 7 + 3 - 2
# n + 1 + 3 - 2
# n + 2

# 9 * 8 / 7 + 6 - 5 * 4 / 3 + 2 - 1
# 10 + 6 - 6 + 2 - 1
# n + 1 + 2 - 1
# n + 2

# 8 * 7 / 6 + 5 - 4 * 3 / 2 + 1
# 9 + 5 - 6 + 1 (n + 1 + 5 - 6 + 1)
# n + 1 - 1 + 1
# n + 1

# 7 * 6 / 5 + 4 - 3 * 2 / 1
# 8 + 4 - 6 (n + 1 + 4 - 6)
# n + 1 - 2
# n - 1

# 6 * 5 / 4 + 3 - 2 * 1
# 7 + 3 - 2 (n + 1 + 3 - 2)
# n + 1 + 1
# n + 2


# 5 * 4 / 3 + 2 - 1
# 6 + 2 - 1 (n + 1 + 2 - 1)
# n + 1 + 1
# n + 2


#######


# 4 * 3 / 2 + 1
# 4 + 1 - (5 - 6 + 1)

# 3 * 2 / 1
# 6
# n + 1 - (4 - 6)
# 3 + 1 - (4 - 6)

# 2 * 1
# n + 1 - (3 - 2)
# 2 + 1 - 3 + 2

# 1
# n + 1 - (2 - 1)
# 1 + 1 - 2 + 1


# => 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
# => 11 + 7 - 7 + 3 - 2
