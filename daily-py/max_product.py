# *=== Monday Sep 17th 2018 - Daily Programmer ===*

# _Reposting since no one solved it, and it's a good problem._

# *[Largest Product in a Series]*

# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

#```
# 731671765313306249192251196744265747423553491949349698352
# 031277450632623957831801698480186947885184385861560789112
# 949495459501737958331952853208805511125406987471585238630
# 507156932909632952274430435576689664895044524452316173185
# 640309871112172238311362229893423380308135336276614282806
# 444486645238749303589072962904915604407723907138105158593
# 079608667017242712188399879790879227492190169972088809377
# 665727333001053367881220235421809751254540594752243525849
# 077116705560136048395864467063244157221553975369781797784
# 617406495514929086256932197846862248283972241375657056057
# 490261407972968652414535100474821663704844031998900088952
# 434506585412275886668811642717147992444292823086346567481
# 391912316282458617866458359124566529476545682848912883142
# 607690042242190226710556263211111093705442175069416589604
# 080719840385096245544436298123098787992724428490918884580
# 156166097919133875499200524063689912560717606058861164671
# 094050775410022569831552000559357297257163626956188267042
# 8252483600823257530420752963450```

# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product? (edited)


LONG_NUMBER  = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
NUM_STRING = str(LONG_NUMBER)


def max_product(string, product = 1):
  num = int(string)
  if num < 10:
    product *= num
    return product
  product *= num % 10
  num //= 10
  return max_product(str(num), product)

def segment_numbers(string):
  section_list = []
  for i in range(len(string)):
    if i+13 < len(string):
      section = string[i:i+13]
      if '0' not in section:
        section_list.append(string[i:i+13])
  return section_list

def find_max_product(string):
  segment_arr = segment_numbers(string)
  max_13 = 0
  for i in segment_arr:
    product = max_product(i)
    if product > max_13:
      max_13 = product
  return max_13

print(find_max_product(NUM_STRING))
